{"version":3,"sources":["../../../src/actions/index.ts","../../../src/actions/client.ts","utils/colyseus-context.tsx","screens/JoinScreen.tsx","utils/mediasoup-context.tsx","screens/RoomScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx","../../src/index.ts"],"names":["ColyseusContext","React","createContext","ColyseusProvider","children","client","useRef","Client","process","useState","roomCode","setRoomCode","connected","setConnect","room","setRoom","roomState","setRoomState","username","setUsername","useEffect","state","send","getType","joinRoomAction","payload","setRoomAndSubscribe","onStateChange","joinRoom","a","leave","axios","get","res","current","joinById","data","createRoom","create","createdRoom","colyseus","Provider","value","useColyseus","useContext","invariant","JoinScreen","Box","margin","bottom","TextInput","placeholder","onChange","event","target","Button","primary","label","onClick","MediasoupContext","MediasoupProvider","serverReceiveId","microphone","deviceRef","Device","receiveTransport","sendTransport","consumerMap","Map","ids","setIds","transportConfig","setTransportConfig","onMessage","cfg","JSON","parse","msg","clientId","sessionId","consume","consumer","set","producerId","console","log","track","speaker","document","createElement","autoplay","srcObject","MediaStream","size","getAudioTracks","length","stream","forEach","drivers","has","delete","producer","sendTransportOptions","id","receiveTransportOptions","loaded","load","routerRtpCapabilities","rtpCapabilities","stringify","createSendTransport","createRecvTransport","on","callback","errback","dtlsParameters","transportId","parameters","kind","rtpParameters","appData","produce","setup","RoomScreen","useMemo","Array","from","map","key","driver","Text","setMicrophone","navigator","mediaDevices","getUserMedia","audio","getTracks","getMic","receiveTransportId","pad","align","Heading","level","autoPlay","playsInline","customTheme","deepMerge","grommet","global","colors","brand","AppView","className","App","Grommet","theme","Header","background","left","Main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cb8f44f.chunk.js","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./client\"), exports);\n// export type ServerAction = ActionType<typeof ServerActions>;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.joinRoom = exports.ClientActionType = void 0;\nconst typesafe_actions_1 = require(\"typesafe-actions\");\nvar ClientActionType;\n(function (ClientActionType) {\n    ClientActionType[\"joinRoom\"] = \"@client/joinRoom\";\n})(ClientActionType = exports.ClientActionType || (exports.ClientActionType = {}));\nexports.joinRoom = typesafe_actions_1.createAction(ClientActionType.joinRoom)();\n//# sourceMappingURL=client.js.map","import { Client, Room } from \"colyseus.js\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport {\n  ICroozRoomState,\n  joinRoom as joinRoomAction,\n} from \"@crooz/shared-types\";\nimport { getType } from \"typesafe-actions\";\nimport invariant from \"tiny-invariant\";\nimport axios from \"axios\";\n\nconst ROOM_NAME = \"CroozRoom\";\n\ntype Colyseus = {\n  client: Client;\n  room: Room<ICroozRoomState> | null;\n\n  roomCode: string;\n  setRoomCode: React.Dispatch<React.SetStateAction<string>>;\n\n  joinRoom: () => void;\n  createRoom: () => void;\n  connected: boolean;\n\n  roomState: ICroozRoomState | null;\n\n  username: string;\n  setUsername: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const ColyseusContext = React.createContext<Colyseus | null>(null);\n\nexport const ColyseusProvider: React.FC = ({ children }) => {\n  const client = useRef<Client>(\n    new Client(`wss://${process.env.REACT_APP_COLYSEUS_IP}`)\n  );\n  const [roomCode, setRoomCode] = useState<string>(\"\");\n  const [connected, setConnect] = useState<boolean>(false);\n  const [room, setRoom] = useState<Room<ICroozRoomState> | null>(null);\n  const [roomState, setRoomState] = useState<ICroozRoomState | null>(null);\n  const [username, setUsername] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!room) {\n      return;\n    }\n    setRoomCode(room.state.roomCode);\n    room.send(getType(joinRoomAction), joinRoomAction({ username }).payload);\n  }, [room, username, room?.state.roomCode]);\n\n  const setRoomAndSubscribe = (room: Room) => {\n    room.onStateChange((state) => {\n      setRoomState({ ...state });\n    });\n    setRoom(room);\n  };\n\n  const joinRoom = async () => {\n    if (!roomCode) {\n      return;\n    }\n    try {\n      if (room) {\n        room.leave();\n      }\n      const res = await axios.get(\n        `https://${process.env.REACT_APP_COLYSEUS_IP}/rooms?roomCode=${roomCode}`\n      );\n      setRoomAndSubscribe(await client.current.joinById(res.data));\n      setConnect(true);\n    } catch (e) {\n      setConnect(false);\n    }\n  };\n\n  const createRoom = async () => {\n    try {\n      if (room) {\n        room.leave();\n      }\n      const createdRoom = await client.current.create(ROOM_NAME);\n      setRoomAndSubscribe(createdRoom);\n      setConnect(true);\n    } catch (e) {\n      setConnect(false);\n    }\n  };\n\n  const colyseus: Colyseus = {\n    client: client.current,\n    roomCode,\n    setRoomCode,\n    joinRoom,\n    createRoom,\n    connected,\n    room,\n    username,\n    setUsername,\n    roomState,\n  };\n\n  return (\n    <ColyseusContext.Provider value={colyseus}>\n      {children}\n    </ColyseusContext.Provider>\n  );\n};\n\nexport const useColyseus = (): Colyseus => {\n  const colyseus = useContext(ColyseusContext);\n\n  invariant(colyseus, \"no context provide for colyseus\");\n\n  return colyseus;\n};\n","import React from \"react\";\nimport { Box, Button, TextInput } from \"grommet\";\nimport { useColyseus } from \"../utils/colyseus-context\";\n\nexport const JoinScreen = (): JSX.Element => {\n  const { roomCode, setRoomCode, joinRoom, createRoom, username, setUsername } =\n    useColyseus();\n\n  return (\n    <Box>\n      <Box margin={{ bottom: \"small\" }}>\n        <TextInput\n          placeholder=\"Room Code\"\n          value={roomCode}\n          onChange={(event) => setRoomCode(event.target.value)}\n        />\n      </Box>\n      <Box margin={{ bottom: \"small\" }}>\n        <TextInput\n          placeholder=\"Username\"\n          value={username}\n          onChange={(event) => setUsername(event.target.value)}\n        />\n      </Box>\n      <Box>\n        <div>\n          <Button\n            primary\n            label=\"Join Cruise\"\n            margin=\"small\"\n            onClick={() => {\n              joinRoom();\n            }}\n          />\n          <Button\n            primary\n            margin=\"small\"\n            label=\"Create Cruise\"\n            onClick={() => {\n              createRoom();\n            }}\n          />\n        </div>\n      </Box>\n    </Box>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Device } from \"mediasoup-client\";\nimport { Room } from \"colyseus.js\";\nimport { ICroozRoomState } from \"@crooz/shared-types\";\nimport { Consumer } from \"mediasoup-client/lib/Consumer\";\nimport { Transport, TransportOptions } from \"mediasoup-client/lib/Transport\";\nimport { TransportConfig } from \"../App\";\nimport { MediaKind, RtpParameters } from \"mediasoup-client/lib/RtpParameters\";\n\ntype Mediasoup = {};\n\nexport const MediasoupContext = React.createContext<Mediasoup | null>(null);\n\ninterface Props {\n  serverReceiveId: string;\n  room: Room;\n  microphone: MediaStreamTrack;\n}\n\nexport const MediasoupProvider: React.FC<Props> = ({\n  children,\n  serverReceiveId,\n  room,\n  microphone,\n}) => {\n  const deviceRef = useRef(new Device());\n  const receiveTransport = useRef<Transport | null>(null);\n  const sendTransport = useRef<Transport | null>(null);\n  const consumerMap = useRef(new Map<string, Consumer>());\n  const [ids, setIds] = useState<{ producer: string; consumer: string } | null>(\n    null\n  );\n  const [transportConfig, setTransportConfig] =\n    useState<TransportConfig | null>(null);\n\n  useEffect(() => {\n    room?.onMessage(\"transport-config\", async (cfg) => {\n      setTransportConfig(JSON.parse(cfg));\n    });\n  }, [room]);\n\n  useEffect(() => {\n    room?.onMessage(\"create-consumer\", async (msg) => {\n      const cfg: {\n        producerId: string;\n        id: string;\n        kind: MediaKind;\n        rtpParameters: RtpParameters;\n        clientId: string;\n      } = JSON.parse(msg);\n      // create a consumer\n      if (cfg.clientId !== room.sessionId) {\n        return;\n      }\n      const consumer = await receiveTransport.current?.consume(cfg);\n      if (consumer) {\n        consumerMap.current.set(cfg.producerId, consumer);\n        console.log(\"Receive valid consumer\", consumer);\n        const { track } = consumer;\n\n        const speaker = document.createElement(\"audio\");\n        speaker.autoplay = true;\n        speaker.srcObject = new MediaStream([track]);\n\n        console.log(\n          \"number of consumers\",\n          consumerMap.current.size,\n          (speaker.srcObject as MediaStream).getAudioTracks().length,\n          \"producer is client: \",\n          cfg.producerId\n        );\n        for (const stream of (\n          speaker.srcObject as MediaStream\n        ).getAudioTracks()) {\n          console.log(stream);\n        }\n      }\n    });\n  }, [room]);\n\n  useEffect(() => {\n    room.onMessage(\"transport-ids\", (msg) => {\n      setIds(JSON.parse(msg));\n    });\n    room?.send(\"mediaSoupJoin\", \"\");\n  }, [room]);\n\n  useEffect(() => {\n    room.onStateChange((state: ICroozRoomState) => {\n      // see if there are new drivers in the room\n      // state.drivers.forEach((value, clientId) => {\n      //   if (clientId !== room.sessionId) {\n      //     console.log(\"new driver detected\", clientId);\n      //   }\n      // });\n\n      // see if drivers have left\n      consumerMap.current.forEach((value, clientId) => {\n        if (!state.drivers.has(clientId)) {\n          consumerMap.current.delete(clientId);\n        }\n      });\n    });\n  });\n\n  useEffect(() => {\n    const setup = async (cfg: TransportConfig) => {\n      const { producer, consumer } = cfg;\n      const sendTransportOptions: TransportOptions = {\n        ...producer,\n        id: ids?.producer || \"\", //change this\n      };\n\n      const receiveTransportOptions: TransportOptions = {\n        ...consumer,\n        id: ids?.consumer || \"\", //change this\n      };\n\n      if (!deviceRef.current.loaded) {\n        await deviceRef.current.load({\n          routerRtpCapabilities: producer.rtpCapabilities,\n        });\n        room.send(\n          \"device-rtp-capabilities\",\n          JSON.stringify(deviceRef.current.rtpCapabilities)\n        );\n      } else {\n        return;\n      }\n\n      // create client side producer transport\n      sendTransport.current =\n        deviceRef.current.createSendTransport(sendTransportOptions);\n\n      receiveTransport.current = deviceRef.current.createRecvTransport(\n        receiveTransportOptions\n      );\n\n      // when client side producer is connected\n      // send the client dtls-params\n      sendTransport.current.on(\n        \"connect\",\n        async ({ dtlsParameters }, callback, errback) => {\n          // Signal local DTLS parameters to the server side transport.\n          console.log(\"Connected send transport\");\n          try {\n            await room.send(\n              \"producer-transport-connect\",\n              JSON.stringify({\n                transportId: sendTransport.current?.id,\n                dtlsParameters: dtlsParameters,\n              })\n            );\n            // Tell the transport that parameters were transmitted.\n            callback();\n          } catch (error) {\n            // Tell the transport that something was wrong.\n            errback(error);\n          }\n        }\n      );\n\n      receiveTransport.current.on(\n        \"connect\",\n        async ({ dtlsParameters }, callback, errback) => {\n          // Signal local DTLS parameters to the server side transport.\n          console.log(\"Connected receive transport\");\n          try {\n            await room.send(\n              \"consumer-transport-connect\",\n              JSON.stringify({\n                transportId: receiveTransport.current?.id,\n                dtlsParameters: dtlsParameters,\n              })\n            );\n            // Tell the transport that parameters were transmitted.\n            callback();\n          } catch (error) {\n            // Tell the transport that something was wrong.\n            errback(error);\n          }\n        }\n      );\n\n      sendTransport.current.on(\n        \"produce\",\n        async (parameters, callback, errback) => {\n          console.log(\"producing\");\n          // Signal parameters to the server side transport and retrieve the id of\n          // the server side new producer.\n          room.onMessage(\"producerId\", (id) => {\n            callback({ id });\n          });\n          await room.send(\n            \"create-producer\",\n            JSON.stringify({\n              transportId: sendTransport.current?.id,\n              kind: parameters.kind,\n              rtpParameters: parameters.rtpParameters,\n              appData: parameters.appData,\n            })\n          );\n\n          // Let's assume the server included the created producer id in the response\n          // data object.\n        }\n      );\n\n      // here we generate the client side producer\n      await sendTransport.current.produce({\n        track: microphone,\n      });\n\n      console.log(\"producer created\");\n    };\n    if (transportConfig) {\n      ids && setup(transportConfig);\n    }\n  }, [room, serverReceiveId, microphone, transportConfig, ids]);\n\n  return (\n    <MediasoupContext.Provider value={null}>\n      {children}\n    </MediasoupContext.Provider>\n  );\n};\n","import { Text, Box, Heading } from \"grommet\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useColyseus } from \"../utils/colyseus-context\";\nimport { MediasoupProvider } from \"../utils/mediasoup-context\";\n\nexport const RoomScreen = () => {\n  const colyseus = useColyseus();\n  const { roomCode, room, roomState } = colyseus;\n\n  const drivers = useMemo(() => {\n    if (roomState) {\n      return Array.from(roomState.drivers).map(([key, driver]) => (\n        <Text key={key}>{driver.username}</Text>\n      ));\n    }\n    return [];\n  }, [roomState]);\n\n  // TODO: refactor audio into its own platform specific provider\n  const [microphone, setMicrophone] = useState<MediaStreamTrack | null>(null);\n  useEffect(() => {\n    const getMic = async () => {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n      const microphone = stream.getTracks()[0];\n\n      setMicrophone(microphone);\n    };\n    getMic();\n  }, []);\n\n  return (\n    microphone &&\n    room && (\n      <MediasoupProvider\n        room={room}\n        serverReceiveId={roomState?.receiveTransportId || \"\"}\n        microphone={microphone}\n      >\n        <Box pad=\"none\" align=\"start\">\n          <Heading level=\"3\">You are connected to {roomCode}</Heading>\n          <Heading level=\"4\">Drivers</Heading>\n          {drivers}\n        </Box>\n        <audio id=\"remoteAudio\" autoPlay={true} playsInline={true}></audio>\n      </MediasoupProvider>\n    )\n  );\n};\n","import React from \"react\";\n\nimport { Header, Grommet, Heading, Main } from \"grommet\";\nimport { RtpCapabilities } from \"mediasoup-client/lib/RtpParameters\";\nimport { TransportOptions } from \"mediasoup-client/lib/Transport\";\nimport \"./App.css\";\nimport { JoinScreen } from \"./screens/JoinScreen\";\nimport { ColyseusProvider, useColyseus } from \"./utils/colyseus-context\";\nimport { grommet } from \"grommet/themes\";\nimport { deepMerge } from \"grommet/utils\";\nimport { RoomScreen } from \"./screens/RoomScreen\";\n\nconst customTheme = deepMerge(grommet, {\n  global: {\n    colors: {\n      brand: \"#EFC929\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <Grommet theme={customTheme}>\n      <ColyseusProvider>\n        <Header background=\"light-4\" pad={{ left: \"medium\" }}>\n          <Heading>Crooz</Heading>\n        </Header>\n        <Main pad=\"medium\">\n          <AppView />\n        </Main>\n      </ColyseusProvider>\n    </Grommet>\n  );\n}\n\nexport type TransportConfig = {\n  consumer: TransportOptions & { rtpCapabilities: RtpCapabilities };\n  producer: TransportOptions & { rtpCapabilities: RtpCapabilities };\n};\n\nconst AppView = (): JSX.Element => {\n  const colyseus = useColyseus();\n  const { connected, room } = colyseus;\n\n  return (\n    <div className=\"App\">\n      {connected && room ? <RoomScreen /> : <JoinScreen />}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./actions\"), exports);\n__exportStar(require(\"./roomState\"), exports);\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}