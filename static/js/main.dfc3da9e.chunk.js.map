{"version":3,"sources":["../../../src/actions/client.ts","utils/colyseus-context.tsx","Components/JoinScreen.tsx","utils/mediasoup-context.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ClientActionType","ColyseusContext","React","createContext","ColyseusProvider","children","client","useRef","Client","process","useState","roomCode","setRoomCode","connected","setConnect","room","setRoom","roomState","setRoomState","username","setUsername","serverReceiveId","useEffect","id","send","getType","joinRoomAction","payload","setRoomAndSubscribe","onStateChange","state","joinRoom","a","leave","axios","get","res","current","joinById","data","createRoom","create","createdRoom","colyseus","Provider","value","useColyseus","useContext","invariant","JoinScreen","TextInput","placeholder","onChange","event","target","Button","primary","label","onClick","MediasoupContext","MediasoupProvider","microphone","deviceRef","Device","receiveTransport","sendTransport","consumerMap","Map","ids","setIds","transportConfig","setTransportConfig","onMessage","cfg","JSON","parse","msg","clientId","sessionId","consume","consumer","track","speaker","document","getElementById","srcObject","addTrack","MediaStream","drivers","forEach","console","log","has","delete","producer","sendTransportOptions","receiveTransportOptions","loaded","load","routerRtpCapabilities","rtpCapabilities","stringify","createSendTransport","createRecvTransport","on","callback","errback","dtlsParameters","transportId","parameters","kind","rtpParameters","appData","produce","setup","AppView","useMemo","Array","from","map","key","driver","setMicrophone","navigator","mediaDevices","getUserMedia","audio","stream","getTracks","getMic","className","receiveTransportId","undefined","autoPlay","playsInline","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dfc3da9e.chunk.js","sourcesContent":["import { createAction } from \"typesafe-actions\";\nexport var ClientActionType;\n(function (ClientActionType) {\n    ClientActionType[\"joinRoom\"] = \"@client/joinRoom\";\n})(ClientActionType || (ClientActionType = {}));\nexport const joinRoom = createAction(ClientActionType.joinRoom)();\n//# sourceMappingURL=client.js.map","import { Client, Room } from \"colyseus.js\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport {\n  ICroozRoomState,\n  joinRoom as joinRoomAction,\n} from \"@crooz/shared-types\";\nimport { getType } from \"typesafe-actions\";\nimport invariant from \"tiny-invariant\";\nimport axios from \"axios\";\n\nconst ROOM_NAME = \"CroozRoom\";\n\ntype Colyseus = {\n  client: Client;\n  room: Room | null;\n\n  roomCode: string;\n  setRoomCode: React.Dispatch<React.SetStateAction<string>>;\n\n  joinRoom: () => void;\n  createRoom: () => void;\n  connected: boolean;\n\n  roomState: ICroozRoomState | null;\n\n  username: string;\n  setUsername: React.Dispatch<React.SetStateAction<string>>;\n  serverReceiveId: string;\n};\n\nexport const ColyseusContext = React.createContext<Colyseus | null>(null);\n\nexport const ColyseusProvider: React.FC = ({ children }) => {\n  const client = useRef<Client>(\n    new Client(`wss://${process.env.REACT_APP_COLYSEUS_IP}`)\n  );\n  const [roomCode, setRoomCode] = useState<string>(\"\");\n  const [connected, setConnect] = useState<boolean>(false);\n  const [room, setRoom] = useState<Room | null>(null);\n  const [roomState, setRoomState] = useState<ICroozRoomState | null>(null);\n  const [username, setUsername] = useState<string>(\"\");\n  const [serverReceiveId, setServerReceiveId] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!room) {\n      return;\n    }\n    setRoomCode(room.id);\n    room.send(getType(joinRoomAction), joinRoomAction({ username }).payload);\n  }, [room, username]);\n\n  const setRoomAndSubscribe = (room: Room) => {\n    room.onStateChange((state) => {\n      setRoomState({ ...state });\n    });\n    setRoom(room);\n  };\n\n  const joinRoom = async () => {\n    if (!roomCode) {\n      return;\n    }\n    try {\n      if (room) {\n        room.leave();\n      }\n      const res = await axios.get(\n        `https://${process.env.REACT_APP_COLYSEUS_IP}/rooms?roomCode=${roomCode}`\n      );\n      setRoomAndSubscribe(await client.current.joinById(res.data));\n      setConnect(true);\n    } catch (e) {\n      setConnect(false);\n    }\n  };\n\n  const createRoom = async () => {\n    try {\n      if (room) {\n        room.leave();\n      }\n      const createdRoom = await client.current.create(ROOM_NAME);\n      setRoomAndSubscribe(createdRoom);\n      setConnect(true);\n    } catch (e) {\n      setConnect(false);\n    }\n  };\n\n  const colyseus: Colyseus = {\n    client: client.current,\n    roomCode,\n    setRoomCode,\n    joinRoom,\n    createRoom,\n    connected,\n    room,\n    username,\n    setUsername,\n    roomState,\n    serverReceiveId,\n  };\n\n  return (\n    <ColyseusContext.Provider value={colyseus}>\n      {children}\n    </ColyseusContext.Provider>\n  );\n};\n\nexport const useColyseus = (): Colyseus => {\n  const colyseus = useContext(ColyseusContext);\n\n  invariant(colyseus, \"no context provide for colyseus\");\n\n  return colyseus;\n};\n","import React from \"react\";\nimport { Button, TextInput } from \"grommet\";\nimport { useColyseus } from \"../utils/colyseus-context\";\n\nexport const JoinScreen = (): JSX.Element => {\n  const { roomCode, setRoomCode, joinRoom, createRoom, username, setUsername } =\n    useColyseus();\n\n  return (\n    <div>\n      <TextInput\n        placeholder=\"Room Code\"\n        value={roomCode}\n        onChange={(event) => setRoomCode(event.target.value)}\n      />\n      <TextInput\n        placeholder=\"Username\"\n        value={username}\n        onChange={(event) => setUsername(event.target.value)}\n      />\n      <Button\n        primary\n        label=\"Join Cruise\"\n        onClick={() => {\n          joinRoom();\n        }}\n      />\n      <Button\n        primary\n        label=\"Create Cruise\"\n        onClick={() => {\n          createRoom();\n        }}\n      />\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport invariant from \"tiny-invariant\";\nimport { Device, types } from \"mediasoup-client\";\nimport { Room } from \"colyseus.js\";\nimport { ICroozRoomState } from \"@crooz/shared-types\";\nimport { Consumer } from \"mediasoup-client/lib/Consumer\";\nimport { Transport, TransportOptions } from \"mediasoup-client/lib/Transport\";\nimport { WebRtcTransport } from \"mediasoup/lib/WebRtcTransport\";\nimport { TransportConfig } from \"../App\";\nimport { MediaKind, RtpParameters } from \"mediasoup-client/lib/RtpParameters\";\n\ntype Mediasoup = {};\n\nexport const MediasoupContext = React.createContext<Mediasoup | null>(null);\n\ninterface Props {\n  serverReceiveId: string;\n  room: Room;\n  microphone: MediaStreamTrack;\n}\n\nexport const MediasoupProvider: React.FC<Props> = ({\n  children,\n  serverReceiveId,\n  room,\n  microphone,\n}) => {\n  const deviceRef = useRef(new Device());\n  const receiveTransport = useRef<Transport | null>(null);\n  const sendTransport = useRef<Transport | null>(null);\n  const consumerMap = useRef(new Map<string, Consumer>());\n  const [ids, setIds] =\n    useState<{ producer: string; consumer: string } | null>(null);\n  const [transportConfig, setTransportConfig] =\n    useState<TransportConfig | null>(null);\n\n  useEffect(() => {\n    room?.onMessage(\"transport-config\", async (cfg) => {\n      setTransportConfig(JSON.parse(cfg));\n    });\n  }, [room]);\n\n  useEffect(() => {\n    room?.onMessage(\"create-consumer\", async (msg) => {\n      const cfg: {\n        producerId: string;\n        id: string;\n        kind: MediaKind;\n        rtpParameters: RtpParameters;\n        clientId: string;\n      } = JSON.parse(msg);\n      // create a consumer\n      if (cfg.clientId !== room.sessionId) {\n        return;\n      }\n      const consumer = await receiveTransport.current?.consume(cfg);\n      if (consumer) {\n        const { track } = consumer;\n        const speaker = document.getElementById(\n          \"remoteAudio\"\n        ) as HTMLAudioElement;\n        if (speaker) {\n          if (speaker.srcObject) {\n            (speaker.srcObject as MediaStream).addTrack(track);\n          } else {\n            speaker.srcObject = new MediaStream([track]);\n          }\n        }\n      }\n    });\n  }, [room]);\n\n  useEffect(() => {\n    room.onMessage(\"transport-ids\", (msg) => {\n      setIds(JSON.parse(msg));\n    });\n    room?.send(\"mediaSoupJoin\", \"\");\n  }, [room]);\n\n  useEffect(() => {\n    room.onStateChange((state: ICroozRoomState) => {\n      // see if there are new drivers in the room\n      state.drivers.forEach((value, clientId) => {\n        if (clientId !== room.sessionId) {\n          console.log(\"new driver detected\", clientId);\n        }\n      });\n\n      // see if drivers have left\n      consumerMap.current.forEach((value, clientId) => {\n        if (!state.drivers.has(clientId)) {\n          consumerMap.current.delete(clientId);\n        }\n      });\n    });\n  });\n\n  useEffect(() => {\n    const setup = async (cfg: TransportConfig) => {\n      const { producer, consumer } = cfg;\n      const sendTransportOptions: TransportOptions = {\n        ...producer,\n        id: ids?.producer || \"\", //change this\n      };\n\n      const receiveTransportOptions: TransportOptions = {\n        ...consumer,\n        id: ids?.consumer || \"\", //change this\n      };\n\n      if (!deviceRef.current.loaded) {\n        await deviceRef.current.load({\n          routerRtpCapabilities: producer.rtpCapabilities,\n        });\n        room.send(\n          \"device-rtp-capabilities\",\n          JSON.stringify(deviceRef.current.rtpCapabilities)\n        );\n      } else {\n        return;\n      }\n\n      // create client side producer transport\n      sendTransport.current =\n        deviceRef.current.createSendTransport(sendTransportOptions);\n\n      receiveTransport.current = deviceRef.current.createRecvTransport(\n        receiveTransportOptions\n      );\n\n      // when client side producer is connected\n      // send the client dtls-params\n      sendTransport.current.on(\n        \"connect\",\n        async ({ dtlsParameters }, callback, errback) => {\n          // Signal local DTLS parameters to the server side transport.\n          try {\n            await room.send(\n              \"producer-transport-connect\",\n              JSON.stringify({\n                transportId: sendTransport.current?.id,\n                dtlsParameters: dtlsParameters,\n              })\n            );\n            // Tell the transport that parameters were transmitted.\n            callback();\n          } catch (error) {\n            // Tell the transport that something was wrong.\n            errback(error);\n          }\n        }\n      );\n\n      receiveTransport.current.on(\n        \"connect\",\n        async ({ dtlsParameters }, callback, errback) => {\n          // Signal local DTLS parameters to the server side transport.\n          try {\n            await room.send(\n              \"consumer-transport-connect\",\n              JSON.stringify({\n                transportId: receiveTransport.current?.id,\n                dtlsParameters: dtlsParameters,\n              })\n            );\n            // Tell the transport that parameters were transmitted.\n            callback();\n          } catch (error) {\n            // Tell the transport that something was wrong.\n            errback(error);\n          }\n        }\n      );\n\n      sendTransport.current.on(\n        \"produce\",\n        async (parameters, callback, errback) => {\n          // Signal parameters to the server side transport and retrieve the id of\n          // the server side new producer.\n          room.onMessage(\"producerId\", (id) => {\n            callback({ id });\n          });\n          await room.send(\n            \"create-producer\",\n            JSON.stringify({\n              transportId: sendTransport.current?.id,\n              kind: parameters.kind,\n              rtpParameters: parameters.rtpParameters,\n              appData: parameters.appData,\n            })\n          );\n\n          // Let's assume the server included the created producer id in the response\n          // data object.\n        }\n      );\n\n      // here we generate the client side producer\n      await sendTransport.current.produce({\n        track: microphone,\n      });\n    };\n    if (transportConfig) {\n      ids && setup(transportConfig);\n    }\n  }, [room, serverReceiveId, microphone, transportConfig, ids]);\n\n  return (\n    <MediasoupContext.Provider value={null}>\n      {children}\n    </MediasoupContext.Provider>\n  );\n};\n","import { Room } from \"colyseus.js\";\nimport { Device, types } from \"mediasoup-client\";\nimport { RtpCapabilities } from \"mediasoup-client/lib/RtpParameters\";\nimport { TransportOptions } from \"mediasoup-client/lib/Transport\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { JoinScreen } from \"./Components/JoinScreen\";\nimport { ColyseusProvider, useColyseus } from \"./utils/colyseus-context\";\nimport { MediasoupProvider } from \"./utils/mediasoup-context\";\n\nfunction App() {\n  return (\n    <ColyseusProvider>\n      <h1>you are in the app</h1>\n      <AppView />\n    </ColyseusProvider>\n  );\n}\n\nexport type TransportConfig = {\n  consumer: TransportOptions & { rtpCapabilities: RtpCapabilities };\n  producer: TransportOptions & { rtpCapabilities: RtpCapabilities };\n};\n\nconst AppView = (): JSX.Element => {\n  const colyseus = useColyseus();\n  const { connected, roomCode, room, roomState } = colyseus;\n\n  const drivers = useMemo(() => {\n    if (roomState) {\n      return Array.from(roomState.drivers).map(([key, driver]) => (\n        <div key={key}>{driver.username}</div>\n      ));\n    }\n    return [];\n  }, [roomState]);\n\n  const [microphone, setMicrophone] = useState<MediaStreamTrack | null>(null);\n\n  useEffect(() => {\n    const getMic = async () => {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n      const microphone = stream.getTracks()[0];\n\n      setMicrophone(microphone);\n    };\n    getMic();\n  }, []);\n\n  return (\n    <>\n      {microphone && (\n        <div className=\"App\">\n          {connected && room ? (\n            <MediasoupProvider\n              room={room}\n              serverReceiveId={roomState?.receiveTransportId || \"\"}\n              microphone={microphone}\n            >\n              <h1>create offer</h1>\n              <div>you are connected to {roomCode} with state:</div>\n              <pre>{JSON.stringify(room?.state, undefined, 2)}`</pre>\n              <div>drivers: {drivers}</div>\n              <audio\n                id=\"remoteAudio\"\n                autoPlay={true}\n                playsInline={true}\n              ></audio>\n            </MediasoupProvider>\n          ) : (\n            <JoinScreen />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}